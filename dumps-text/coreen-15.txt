   #오늘도 더 나은 코드를 작성하였습니까?

   본문 바로가기

오늘도 더 나은 코드를 작성하였습니까?

   (BUTTON) 카테고리
   (BUTTON) 검색하기

   검색하기

   블로그 내 검색 ____________________

   오늘도 더 나은 코드를 작성하였습니까?
   프로필사진 hik14
     __________________________________________________________________

     * 분류 전체보기 (331)
          + Firebase (0)
               o CloudeMessaging(FCM) (0)
          + Android Basic (14)
          + DI (17)
               o Dagger2 (13)
               o Hilt (4)
          + Android Jetpack Architectur.. (70)
               o Introduction and Overview (2)
               o DataBinding (9)
               o LifeCycle (3)
               o LiveData (5)
               o ViewModel (8)
               o Room (8)
               o Navigation (13)
               o NavigationUI (3)
               o Workmanager (7)
               o Paging3 (11)
          + 자료구조 (22)
          + Algorithm (21)
               o 문제풀이 (0)
               o 개념 (21)
          + Kotlin in Action (36)
               o 코틀린 기초 (15)
               o 코틀린 답게 사용하기 (21)
          + Android Realm (4)
          + Android Material Design (16)
          + Android Material Design3 (18)
          + 기타 (5)
          + Coroutine (24)
               o coroutineFlow (15)
               o coroutineBasic (5)
          + 문제해결 (1)
          + 업무정리 (0)
          + 디자인패턴 (12)
               o 생성패턴 (6)
               o 구조패턴 (0)
               o 행동패턴 (0)
          + 운영체제 (1)
          + kotlin Multiplatform (8)
               o realm-kotlin-kmm (7)
          + GoogleCloudplatform (0)
          + Ktor (11)
               o Client (7)
          + Koin (6)
          + Compose (9)

   Guestbook
   Notice

   Recent Posts
     * 안드로이드 컴포즈 네비게이션1 기초 Compose⋯
     * Compose UI Event 다루기
     * Event에 따른 UI State 처리방법
     * Compose 상태와 상태홀더 다루기 State ⋯

   Recent Comments
     * 흥미로운 주제에 대한 글 잘 읽었습니다! 👏 제 블로그⋯
     * 포스팅 잘 보고 가요^^❤️
     * 죄송한데.. 저 소프트웨어 IT 개발 블로그고 제 공부⋯
     * 누구신가요??? 저를 아시나요?

   Link

   CAPTION: «   2025/01   »

   일  월  화  수  목  금  토
            1  2  3  4
   5  6  7  8  9  10 11
   12 13 14 15 16 17 18
   19 20 21 22 23 24 25
   26 27 28 29 30 31
   Tags
     * 디자인패턴
     * 프로토타입 패턴
     * Singleton
     * Abstract Factory
     * PrototypePattern
     * F
     * 옵저버 패턴
     * 빌터패턴
     * builderPattern
     * El
     * Kotlin
     * Observer Pattern
     * 추상 팩토리
     * ㅓ
     * 추상팩토리패턴
     * 팩토리 메소드
     * r
     * a
     * Design Pattern
     * 디자인패턴 #
     * 함수형프로그래밍
     * factory method
     * Functional Programming
     * 싱글톤
     * 코틀린
     * ㅋㅁ
     * designPattern

   more
   Archives
     * 2024/12 (1)
     * 2024/11 (4)
     * 2024/10 (1)
     * 2024/09 (3)
     * 2024/08 (1)

   Today
          0

   Total
          51,427

   (BUTTON) 닫기 관리 메뉴
     * 글쓰기
     * 방명록
     * RSS
     * 관리

오늘도 더 나은 코드를 작성하였습니까?

Hash Collision(해시 충돌) Open Addressing(개방 주소법) 본문

   자료구조

Hash Collision(해시 충돌) Open Addressing(개방 주소법)

   hik14 2023. 11. 9. 18:47

해시 충돌

hash function이 서로 다른 두 개의 입력값에 대해 동일한 출력값을 내는 상황

   [img.png]

Open Addressing(개방 주소법)

   해시 충돌이 발생하면 테이블 내의 사용되지 않는 곳을 탐사(Probe) 한 후, 비어있는 곳에 충돌된 데이터를 저장하는 방식


   - Linear Probing (선형조사)


   비어있는 곳을 선택할 때, 바로 다음 빈 공간으로 한다.


   1. 함수의 결과에 따른 index의 슬롯이 비어 있으면 데이터를 저장한다.

   2. 비어 있지 않다면, 이전에 저장된 데이터의 key 비교한다.

   3. key 값이 같다면, 값을 업데이트한다. 다르면 바로 다음 index를 확인합니다.

   3. 빈 슬롯을 찾을때까지 1칸씩 이동하여, 빈 슬롯을 찾으면 데이터를 저장합니다.


   *저장을 하는 배열은 원형이라 가정을 합니다.

   *특정 위치에 데이터가 집중적으로 저장되어 군집형태를 이루게 되기 때문에 해당 데이터를 찾을때 시간이 비효율적이될 수 있습니다.

   [img.png] key와 value가 같다고 가정한다.


   - Quadratic Probing (이차 조사)


   바로 다음 빈 공간에  데이터를 저장한것과 달리 제곱수를 더해서 빈 슬롯을 찾아서 저장한다.

   제곱수로 빈 공간을 찾는 이유는 가능하면 데이터가 한 곳에 몰리지 않도록 하기 위해서 입니다. 그래서 Cluster(군집)의
   크기를 적게 하기 위함 입니다. 하지만, 여전히 군집이 커질수 있습니다.


   1. 함수의 결과에 따른 index의 주소가 비어 있으면 데이터를 저장한다.

   2. 비어 있지 않다면, 이전에 저장된 데이터의 key 비교한다.

   3. key 값이 같다면, 값을 업데이트한다, 다르면 바로 1칸, 2칸, 4칸, 8칸, 16칸 씩 이동하면서 index를
   확인합니다.

   4.  빈 슬롯을 찾을때까 1칸, 2칸, 4칸, 8칸, 16칸이동하여, 빈 슬롯을 찾으면 데이터를 저장합니다.


   - Double Hash (이중 해시)


    빈 주소의 공간을 택하는 방법을 랜덤성있게 하여 가능한 Cluster(군집)의 크기를 적게해야 된다

   이중 해쉬 방식은 2개의 해시함수를 사용한다.


   first hash function - 슬롯에서 데이터가 들어갈 idx를 계산한다.

   second hash function - 충돌 발생시 빈 슬롯을 찾기위해 얼마나 이동할지 구하기 위해 사용됩니다.


   1. 함수의 결과에 따른 index의 슬롯이 비어 있으면 데이터를 저장한다.

   2. 비어 있지 않다면, 이전에 저장된 데이터의 key 비교한다.

   3. key 값이 같다면, 값을 업데이트한다. 다르면 second hash function에 넣어 몇칸씩 이동할지 계산합니다.

   3. 슬롯을 찾을때까지 offset을 증가시켜, 빈 공간을 찾아 데이터를 저장합니다.


   [img.png]



   * 두 개의 해시 함수를 이용하기 때문에 연산이 상대적으로 오래걸립니다. 대신 클러스터의 크기가 상대적으로 작아진다.


   결국 OpenAddressin(Linear, Quadratic, Double)은 Cluster의 크기 따라 성능이 달려있다.


   Cluster 영향을 주는것은 Hash Function, Collision Resolution Method, Load
   Factor 가 있다.


   Load Factor란 Hash Table Size중 얼마나 슬롯에 데이터가 들어가 있는냐이다.

   즉, 실제 저장된 데이터의 개수가 N개고 Hash Table Size는 M이라 하면 Load Factor의 값은 N/M이다.

   0 <= N/M <= 1


   평균적으로 M >= 2N, 즉 테이블의 크기가 저장된 데이터의 크기 보다 2배 이상으로 유지하고, C-Universe Hash
   Function을 사용하면 Cluster의  평균 탐색 시간이 O(1)된다는것이 증명 되어있다.


   새로운 데이터가 삽입 되었을 경우, 슬롯의 절반이 찼다면, 확장하는 비용을 감수하더라도 Table을 크기를 2배로 증가 시키고,

   데이터를 재배치 한다.
   (BUTTON) 공유하기
   (BUTTON) 게시글 관리
   (BUTTON) 오늘도 더 나은 코드를 작성하였습니까?
   저작자표시 비영리 변경금지

'자료구조' 카테고리의 다른 글

     Hash Collision(해시 충돌) Chaining(체이닝) 및 kotlin 구현  (1)   2023.11.14
   HashTable Open Addressing(Linear Probing) kotlin 구현  (0) 2023.11.10
           Map Hash(Hash Table, Hash Function)  (1)         2023.11.07
         균형 이진 트리 비교(AVL Tree vs Red-Black Tree)  (0)       2023.11.02
            Red-Black Tree (레드 블랙 트리) 데이터 삭제.  (1)          2023.11.02
   '자료구조' Related Articles
     * Hash Collision(해시 충돌) Chaining(체이닝) 및 kotlin 구현 2023.11.14
     * HashTable Open Addressing(Linear Probing) kotlin 구현 2023.11.10
     * Map Hash(Hash Table, Hash Function) 2023.11.07
     * 균형 이진 트리 비교(AVL Tree vs Red-Black Tree) 2023.11.02

   more
     __________________________________________________________________

   Blog is powered by kakao / Designed by Tistory

티스토리툴바
